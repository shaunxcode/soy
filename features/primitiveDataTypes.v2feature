Scenario: single anonymous arg
	Given the input "([+ % %] 5 6)"
	When the input is parsed
	Then the output should be "((lambda (_0) (+ _0 _0)) 5 6)"

Scenario: anonymous args
	Given the input "([+ %0 %1] 5 6)"
	When the input is parsed
	Then the output should be "((lambda (_0 _1) (+ _0 _1)) 5 6)"

Scenario: writing a semi colon between atoms is a cascade shorthand
	Given the input "(a b; c ; d)"
	When the input is parsed
	Then the output should be "(do (a b) (a c) (a d))"

Scenario: writing a semicolon cascading expression where semicolons touch tokens
	Given the input "(a b;c;d)"
	When the input is parsed
	Then the output should be "(do (a b) (a c) (a d))"

Scenario: writing a semicolon cascading expression where arguments are passed
	Given the input "(a b;c 1 2;d 3 (+ 4 5))"
	When the input is parsed
	Then the output should be "(do (a b) (a c 1 2) (a d 3 (+ 4 5)))"

Scenario: writing a comma expression (applicative accumulation)
	Given the input "(a b, c , d)"
	When the input is parsed
	Then the output should be "(((a b) c) d)"

Scenario: writing a comma expression with arguments
	Given the input "(a b x, c 1 2, d 3 (+ 4 5))"
	When the input is parsed
	Then the output should be "(((a b x) c 1 2) d 3 (+ 4 5))"

Scenario: writing a tilda expression
	Given the input "(a b ~ c ~ d)"
	When the input is parsed
	Then the output should be "(d (c (a b)))"

Scenario: writing a tilda expression with arguments
	Given the input "(a b 1 ~ c 2 3~ d 4 (+ 5 6))"
	When the input is parsed
	Then the output should be "(d (c (a b 1) 2 3) 4 (+ 5 6))"